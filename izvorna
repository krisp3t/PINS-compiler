<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
typ arr2dim: arr[2] arr[10] integer;
var a: arr2dim;

fun main(x: integer): integer = (
    fill_array(a[0], 0),
    fill_array(a[1], 10),
    print_arr(a),
    0
);

fun fill_array(a: arr[10] integer, x: integer): integer = (
    { for i = 0, 10, 1:
        { a[i] = x + i }
    },
    0
) { where
    var i: integer
};

fun print_arr(a: arr2dim): integer = (
    { for i = 0, 2, 1:
        print_array(a[i])
    },
    0
) { where
    var i: integer;
    fun print_array(a: arr[10] integer): integer = (
        { for i = 0, 10, 1:
            print_int(a[i])
        },
        0
    ) { where
        var i: integer
    }
}
=======
			'danes je ''lep'' dan'
>>>>>>> repo1/main
=======
=======
>>>>>>> repo3/main
typ prvic:string;
typ drugic : integer;
typ tretjic : besedilo;
typ cetrtic: arr[7] arr[7] logical;
var petic : arr [ 10 ] integer;

fun prvaFunkcija (prvic:string, drugic:integer, cetrtic:arr[7] logical) : integer =
5 + 3 - 2 == 10 & true | beseda / drugabeseda * 'danesjelepdanaaaaa' % cetrtic != petic + 5 - !e
- (-10) + (+(+(-10))) / (!cetrtic) + 100 - false | nekaj & nekaj == bla | nekaj >= blabla &
nekaj <= blablabla | nekaj + nekaj < bla & nekaj - nekaj > nekajbla { where
    fun drugaFunkcija(nekaj:integer):integer=
        {
            { if haha then {
                    if nekaj then 5+3-1-4+2 * true else {
                        while nekaj >= nekaj * (-5323223) + -44545    : {
                            for nekaj = 1, nekaj >= -9999999, nekajnekaj-1-1-1-1:nekaj
                        }
                    }
                }
             }
        = celotenprogramtideluje69 { where
            fun epicBubblesort(polje:arr[10]integer):void =
                n == dolzinaPolja &
                temp == 0 & {
                for i=0,i<n,i + 1:
                    { for j=0, j<(n-i),j + 1:
                        {
                            if polje[j-1] > polje[j] then
                                temp == polje[j-1] &
                                polje[j-1] == polje[j] &
                                polje[j] == temp &
                                blablabla #neki komentarji
                        }
                    }
                }
            }
         }
    }
<<<<<<< HEAD
#lololololol
>>>>>>> repo2/main
=======
#lololololol
>>>>>>> repo3/main
=======
var x: integer;
fun f(a: integer): t = x;
typ t: a
>>>>>>> repo4/main
=======
# quicksort
fun partition (tab: arr[100] integer, low: integer, high: integer) : integer = (
    {pivot = tab[high]},
    {i = (low - 1)},
    ({for j = low, high, i:
        { if tab[j] <= pivot then (

            {i = i+1},
            {tmp = tab[i]},
            {tab[j] = tab[j]},
            {tab[j] = tmp}

        ) {where var tmp: integer}}
    }) {where var j: integer},

    {tmp = tab[i+1]},
    {tab[i+1] = tab[high]},
    {tab[high] = tmp}
) {
    where var pivot: integer; 
    var i: integer; 
    var tmp: integer
};

fun sort(tab: arr[100] integer, low: integer, high: integer) : integer = (
    ({ if low < high then (
        { pi = partition(tab, low, high)},
        sort(tab, low, pi-1),
        sort(tab, pi+1, high)
        ) {where var pi: integer}
    },0)
)
>>>>>>> repo5/main
=======
fun f(a: integer, b: string): integer = a + x {where var x : integer }
>>>>>>> repo6/main
